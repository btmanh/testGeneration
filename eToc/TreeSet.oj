import demo.*;
import java.util.*;
import java.io.*;

public class TreeSet instantiates BranchInstrumentor extends AbstractSet implements  Cloneable, java.io.Serializable {

	/**
	 * The backing map.
	 */
	private NavigableMap m;

	// Dummy value to associate with an Object in the backing Map
	private static final Object PRESENT = new Object();

	/**
	 * Constructs a set backed by the specified navigable map.
	 */
	TreeSet(NavigableMap m) {
		this.m = m;
	}

	/**
	 * Constructs a new, empty tree set, sorted according to the natural ordering of
	 * its elements. All elements inserted into the set must implement the
	 * {@link Comparable} interface. Furthermore, all such elements must be
	 * <i>mutually comparable</i>: {@code e1.compareTo(e2)} must not throw a
	 * {@code ClassCastException} for any elements {@code e1} and {@code e2} in the
	 * set. If the user attempts to add an element to the set that violates this
	 * constraint (for example, the user attempts to add a string element to a set
	 * whose elements are integers), the {@code add} call will throw a
	 * {@code ClassCastException}.
	 */
	public TreeSet() {
		this(new TreeMap());
	}

	/**
	 * Constructs a new, empty tree set, sorted according to the specified
	 * comparator. All elements inserted into the set must be <i>mutually
	 * comparable</i> by the specified comparator: {@code comparator.compare(e1,
	 * e2)} must not throw a {@code ClassCastException} for any elements {@code e1}
	 * and {@code e2} in the set. If the user attempts to add an element to the set
	 * that violates this constraint, the {@code add} call will throw a
	 * {@code ClassCastException}.
	 *
	 * @param comparator
	 *            the comparator that will be used to order this set. If
	 *            {@code null}, the {@linkplain Comparable natural ordering} of the
	 *            elements will be used.
	 */
	public TreeSet(Comparator comparator) {
		this(new TreeMap(comparator));
	}

	/**
	 * Constructs a new tree set containing the elements in the specified
	 * collection, sorted according to the <i>natural ordering</i> of its elements.
	 * All elements inserted into the set must implement the {@link Comparable}
	 * interface. Furthermore, all such elements must be <i>mutually comparable</i>:
	 * {@code e1.compareTo(e2)} must not throw a {@code ClassCastException} for any
	 * elements {@code e1} and {@code e2} in the set.
	 *
	 * @param c
	 *            collection whose elements will comprise the new set
	 * @throws ClassCastException
	 *             if the elements in {@code c} are not {@link Comparable}, or are
	 *             not mutually comparable
	 * @throws NullPointerException
	 *             if the specified collection is null
	 */
	public TreeSet(Collection c) {
		this();
		addAll(c);
	}

	/**
	 * Constructs a new tree set containing the same elements and using the same
	 * ordering as the specified sorted set.
	 *
	 * @param s
	 *            sorted set whose elements will comprise the new set
	 * @throws NullPointerException
	 *             if the specified sorted set is null
	 */
	public TreeSet(SortedSet s) {
		this(s.comparator());
		addAll(s);
	}

	/**
	 * Returns an iterator over the elements in this set in ascending order.
	 *
	 * @return an iterator over the elements in this set in ascending order
	 */
	public Iterator iterator() {
		return m.navigableKeySet().iterator();
	}

	/**
	 * Returns an iterator over the elements in this set in descending order.
	 *
	 * @return an iterator over the elements in this set in descending order
	 * @since 1.6
	 */
	public Iterator descendingIterator() {
		return m.descendingKeySet().iterator();
	}

	/**
	 * @since 1.6
	 */
	public NavigableSet descendingSet() {
		return (NavigableSet) new TreeSet(m.descendingMap());
	}

	/**
	 * Returns the number of elements in this set (its cardinality).
	 *
	 * @return the number of elements in this set (its cardinality)
	 */
	public int size() {
		return m.size();
	}

	/**
	 * Returns {@code true} if this set contains no elements.
	 *
	 * @return {@code true} if this set contains no elements
	 */
	public boolean isEmpty() {
		return m.isEmpty();
	}

	/**
	 * Returns {@code true} if this set contains the specified element. More
	 * formally, returns {@code true} if and only if this set contains an element
	 * {@code e} such that
	 * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
	 *
	 * @param o
	 *            object to be checked for containment in this set
	 * @return {@code true} if this set contains the specified element
	 * @throws ClassCastException
	 *             if the specified object cannot be compared with the elements
	 *             currently in the set
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 */
	public boolean contains(Object o) {
		return m.containsKey(o);
	}

	/**
	 * Adds the specified element to this set if it is not already present. More
	 * formally, adds the specified element {@code e} to this set if the set
	 * contains no element {@code e2} such that
	 * <tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>. If this set
	 * already contains the element, the call leaves the set unchanged and returns
	 * {@code false}.
	 *
	 * @param e
	 *            element to be added to this set
	 * @return {@code true} if this set did not already contain the specified
	 *         element
	 * @throws ClassCastException
	 *             if the specified object cannot be compared with the elements
	 *             currently in this set
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 */
	public boolean add(Integer e) {
		return m.put(e, PRESENT) == null;
	}

	/**
	 * Removes the specified element from this set if it is present. More formally,
	 * removes an element {@code e} such that
	 * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>, if this set
	 * contains such an element. Returns {@code true} if this set contained the
	 * element (or equivalently, if this set changed as a result of the call). (This
	 * set will not contain the element once the call returns.)
	 *
	 * @param o
	 *            object to be removed from this set, if present
	 * @return {@code true} if this set contained the specified element
	 * @throws ClassCastException
	 *             if the specified object cannot be compared with the elements
	 *             currently in this set
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 */
	public boolean remove(Object o) {
		return m.remove(o) == PRESENT;
	}

	/**
	 * Removes all of the elements from this set. The set will be empty after this
	 * call returns.
	 */
	public void clear() {
		m.clear();
	}


	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code fromElement} or {@code toElement} is null and this set
	 *             uses natural ordering, or its comparator does not permit null
	 *             elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 * @since 1.6
	 */
	public NavigableSet subSet(Integer fromElement, boolean fromInclusive, Integer toElement, boolean toInclusive) {
		return (NavigableSet) new TreeSet(m.subMap(fromElement, fromInclusive, toElement, toInclusive));
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code toElement} is null and this set uses natural ordering,
	 *             or its comparator does not permit null elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 * @since 1.6
	 */
	public NavigableSet headSet(Integer toElement, boolean inclusive) {
		return (NavigableSet) new TreeSet(m.headMap(toElement, inclusive));
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code fromElement} is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 * @since 1.6
	 */
	public NavigableSet tailSet(Integer fromElement, boolean inclusive) {
		return (NavigableSet) new TreeSet(m.tailMap(fromElement, inclusive));
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code fromElement} or {@code toElement} is null and this set
	 *             uses natural ordering, or its comparator does not permit null
	 *             elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 */
	public SortedSet subSet(Integer fromElement, Integer toElement) {
		return subSet(fromElement, true, toElement, false);
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code toElement} is null and this set uses natural ordering,
	 *             or its comparator does not permit null elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 */
	public SortedSet headSet(Integer toElement) {
		return headSet(toElement, false);
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if {@code fromElement} is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @throws IllegalArgumentException
	 *             {@inheritDoc}
	 */
	public SortedSet tailSet(Integer fromElement) {
		return tailSet(fromElement, true);
	}

	public Comparator comparator() {
		return m.comparator();
	}

	/**
	 * @throws NoSuchElementException
	 *             {@inheritDoc}
	 */
	public Integer first() {
		return (Integer) m.firstKey();
	}


	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @since 1.6
	 */
	public Integer lower(Integer e) {
		return (Integer) m.lowerKey(e);
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @since 1.6
	 */
	public Integer floor(Integer e) {
		return (Integer) m.floorKey(e);
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @since 1.6
	 */
	public Integer ceiling(Integer e) {
		return (Integer) m.ceilingKey(e);
	}

	/**
	 * @throws ClassCastException
	 *             {@inheritDoc}
	 * @throws NullPointerException
	 *             if the specified element is null and this set uses natural
	 *             ordering, or its comparator does not permit null elements
	 * @since 1.6
	 */
	public int higher(Integer e) {
		return (int) m.higherKey(e);
	}

	/**
	 * @since 1.6
	 */
	public int pollFirst() {
		Map.Entry e = m.pollFirstEntry();
		if (e == null)
			return (Integer) null;
		else
			return (int) e.getKey();
	}

	/**
	 * Returns a shallow copy of this {@code TreeSet} instance. (The elements
	 * themselves are not cloned.)
	 *
	 * @return a shallow copy of this set
	 */
	public Object clone() {
		TreeSet clone = null;
		try {
			clone = (TreeSet) super.clone();
		} catch (CloneNotSupportedException e) {
			throw new InternalError();
		}

		clone.m = new TreeMap(m);
		return clone;
	}

}
